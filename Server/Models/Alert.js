import mongoose from "mongoose";

const AlertSchema = new mongoose.Schema({
  type: { 
    type: String, 
    enum: ["critical", "warning", "info", "success"], 
    required: true 
  },
  title: { type: String, required: true },
  message: { type: String, required: true },
  source: { type: String, required: true },
  status: { 
    type: String, 
    enum: ["active", "acknowledged", "resolved"], 
    default: "active" 
  },
  loadBalancerId: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: "LoadBalancer", 
    required: false 
  },
  loadBalancerName: { type: String, required: false },
  userId: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: "User", 
    required: true 
  },
  metadata: {
    instanceId: { type: String, required: false },
    instanceUrl: { type: String, required: false },
    metrics: {
      latency: { type: Number, required: false },
      errorRate: { type: Number, required: false },
      requests: { type: Number, required: false }
    }
  },
  acknowledgedAt: { type: Date, required: false },
  acknowledgedBy: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: "User", 
    required: false 
  },
  resolvedAt: { type: Date, required: false },
  resolvedBy: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: "User", 
    required: false 
  },
  autoGenerated: { type: Boolean, default: false },
  severity: { 
    type: Number, 
    min: 1, 
    max: 5, 
    default: 3 
  }
}, { timestamps: true });

// Index for better query performance
AlertSchema.index({ userId: 1, status: 1, type: 1 });
AlertSchema.index({ loadBalancerId: 1 });
AlertSchema.index({ createdAt: -1 });

// Virtual for formatting timestamp
AlertSchema.virtual('timeAgo').get(function() {
  const now = new Date();
  const diffInMinutes = Math.floor((now.getTime() - this.createdAt.getTime()) / 60000);
  
  if (diffInMinutes < 1) return "Just now";
  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
  if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;
  return `${Math.floor(diffInMinutes / 1440)}d ago`;
});

// Static method to create system alerts
AlertSchema.statics.createSystemAlert = async function(alertData) {
  const alert = new this({
    autoGenerated: true,
    source: "System Monitor",
    ...alertData
  });
  return await alert.save();
};

// Instance method to acknowledge alert
AlertSchema.methods.acknowledge = function(userId) {
  this.status = "acknowledged";
  this.acknowledgedAt = new Date();
  this.acknowledgedBy = userId;
  return this.save();
};

// Instance method to resolve alert
AlertSchema.methods.resolve = function(userId) {
  this.status = "resolved";
  this.resolvedAt = new Date();
  this.resolvedBy = userId;
  return this.save();
};

export default mongoose.models.Alert || mongoose.model("Alert", AlertSchema);