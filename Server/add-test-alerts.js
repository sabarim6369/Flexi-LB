
import { connectDB } from "./config/db.js";
import Alert from "./Models/Alert.js";
import LoadBalancer from "./Models/LoadBalancer.js";
import User from "./Models/User.js";

const addTestAlerts = async () => {
  try {
    console.log("üîó Connecting to database...");
    await connectDB();
    console.log("‚úÖ Database connected!");

    // Find the first user in the database
    const user = await User.findOne();
    if (!user) {
      console.log("‚ùå No users found. Please create a user first by logging into the app.");
      process.exit(1);
    }
    console.log(`‚úÖ Found user: ${user.username}`);

    // Find the first load balancer
    const lb = await LoadBalancer.findOne({ owner: user._id });
    
    // Create test alerts
    const testAlerts = [
      {
        type: "critical",
        title: "Instance Down Alert",
        message: "Instance http://test-server-1.com is not responding. Please check immediately.",
        source: "Health Check Service",
        userId: user._id,
        loadBalancerId: lb?._id,
        loadBalancerName: lb?.name || "Test Load Balancer",
        autoGenerated: true,
        severity: 5
      },
      {
        type: "warning", 
        title: "High Latency Detected",
        message: "Response time has exceeded 1000ms threshold on multiple instances.",
        source: "Performance Monitor",
        userId: user._id,
        loadBalancerId: lb?._id,
        loadBalancerName: lb?.name || "Test Load Balancer",
        autoGenerated: true,
        severity: 3
      },
      {
        type: "info",
        title: "Alert System Activated",
        message: "The alert monitoring system has been successfully activated and is now tracking your load balancers.",
        source: "System Initialization",
        userId: user._id,
        autoGenerated: false,
        severity: 1
      },
      {
        type: "success",
        title: "Test Alert Created",
        message: "This is a test alert to verify the system is working correctly. You can safely dismiss this alert.",
        source: "Test System",
        userId: user._id,
        autoGenerated: false,
        severity: 1
      }
    ];

    // Clear existing test alerts first
    await Alert.deleteMany({ 
      userId: user._id, 
      source: { $in: ["Test System", "System Initialization"] }
    });

    // Add new test alerts
    for (const alertData of testAlerts) {
      const alert = await Alert.create(alertData);
      console.log(`‚úÖ Created ${alertData.type} alert: ${alertData.title} (ID: ${alert._id})`);
    }

    console.log(`\nüéâ Successfully created ${testAlerts.length} test alerts!`);
    console.log("üîÑ Refresh your alerts page to see the new alerts.");

  } catch (error) {
    console.error("‚ùå Error adding test alerts:", error);
  } finally {
    process.exit(0);
  }
};

addTestAlerts();