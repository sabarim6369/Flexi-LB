// Test script to verify alert system functionality
// Run this with: node test-alerts.js

import { connectDB } from "./config/db.js";
import Alert from "./Models/Alert.js";
import LoadBalancer from "./Models/LoadBalancer.js";
import User from "./Models/User.js";

const testAlertSystem = async () => {
  try {
    console.log("üîó Connecting to database...");
    await connectDB();
    
    console.log("‚úÖ Database connected!");
    
    // Test 1: Create a test user if doesn't exist
    let testUser = await User.findOne({ email: "test@example.com" });
    if (!testUser) {
      testUser = await User.create({
        username: "testuser",
        email: "test@example.com",
        password: "hashedpassword123"
      });
      console.log("‚úÖ Test user created");
    } else {
      console.log("‚úÖ Test user found");
    }
    
    // Test 2: Create a test load balancer if doesn't exist
    let testLB = await LoadBalancer.findOne({ name: "Test-LB-Alert-System" });
    if (!testLB) {
      testLB = await LoadBalancer.create({
        name: "Test-LB-Alert-System",
        owner: testUser._id,
        endpoint: "test-lb-alert.example.com",
        algorithm: "round_robin",
        slug: "test-lb-alert-system",
        instances: [
          {
            id: "test-instance-1",
            url: "http://nonexistent-server-1.com",
            instancename: "Test Instance 1",
            isHealthy: true,
            healthStatus: "healthy",
            weight: 1,
            metrics: {
              requests: 0,
              failures: 0,
              totalLatencyMs: 0,
              lastLatency: 0
            }
          },
          {
            id: "test-instance-2", 
            url: "http://nonexistent-server-2.com",
            instancename: "Test Instance 2",
            isHealthy: true,
            healthStatus: "healthy",
            weight: 1,
            metrics: {
              requests: 0,
              failures: 0,
              totalLatencyMs: 0,
              lastLatency: 0
            }
          }
        ]
      });
      console.log("‚úÖ Test load balancer created");
    } else {
      console.log("‚úÖ Test load balancer found");
    }
    
    // Test 3: Create test alerts
    const testAlerts = [
      {
        type: "critical",
        title: "Test Critical Alert",
        message: "This is a test critical alert to verify the system is working",
        source: "Test System",
        userId: testUser._id,
        loadBalancerId: testLB._id,
        loadBalancerName: testLB.name,
        autoGenerated: false,
        severity: 5
      },
      {
        type: "warning",
        title: "Test Warning Alert",
        message: "This is a test warning alert",
        source: "Test System",
        userId: testUser._id,
        loadBalancerId: testLB._id,
        loadBalancerName: testLB.name,
        autoGenerated: false,
        severity: 3
      },
      {
        type: "info",
        title: "Test Info Alert",
        message: "This is a test info alert",
        source: "Test System",
        userId: testUser._id,
        autoGenerated: false,
        severity: 2
      }
    ];
    
    for (const alertData of testAlerts) {
      const alert = await Alert.create(alertData);
      console.log(`‚úÖ Created ${alertData.type} alert: ${alert._id}`);
    }
    
    // Test 4: Query alerts
    const allAlerts = await Alert.find({ userId: testUser._id });
    console.log(`‚úÖ Found ${allAlerts.length} alerts for test user`);
    
    // Test 5: Test alert methods
    const testAlert = allAlerts[0];
    if (testAlert && testAlert.status === "active") {
      await testAlert.acknowledge(testUser._id);
      console.log(`‚úÖ Acknowledged alert: ${testAlert.title}`);
      
      await testAlert.resolve(testUser._id);
      console.log(`‚úÖ Resolved alert: ${testAlert.title}`);
    }
    
    console.log("\nüéâ Alert system test completed successfully!");
    console.log("\nüìã Summary:");
    console.log(`- Database connection: ‚úÖ`);
    console.log(`- User creation: ‚úÖ`);
    console.log(`- Load balancer creation: ‚úÖ`);
    console.log(`- Alert creation: ‚úÖ`);
    console.log(`- Alert querying: ‚úÖ`);
    console.log(`- Alert state changes: ‚úÖ`);
    
    console.log("\nüöÄ Ready to test health checks!");
    console.log("To test server down alerts:");
    console.log("1. Start your server: node index.js");
    console.log("2. The health checks will run every 1 second");
    console.log("3. Since the test instances point to non-existent servers, you should see 'Instance Down' alerts being created");
    console.log("4. Check your frontend at /alerts to see the alerts in real-time");
    
  } catch (error) {
    console.error("‚ùå Test failed:", error);
  } finally {
    process.exit(0);
  }
};

testAlertSystem();